<?php

/**
 * @file
 * Primary module hooks for Postings module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\MigrateExecutableInterface;
use Drupal\migrate\Row;

/**
 * Callback to retrieve urls that feed the job posting migration.
 *
 * @param \Drupal\migrate\Plugin\MigrationInterface $migration
 *
 * @return array
 */
function postings_posting_urls(MigrationInterface $migration): array {
  $urls = [];
  try {
    $database = Drupal::database();
    $result = $database->query('SELECT url FROM posting_urls ORDER BY url DESC LIMIT 10');
    foreach ($result as $row) {
      $urls[] = $row->url;
    }
    return $urls;
  }
  catch (Exception $e) {
    Drupal::logger('postings')->error('Could not retrieve urls: ' . $e->getMessage());
  }
  return $urls;
}

/**
 * Implements hook_entity_presave()
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 * @throws \Exception
 */
function postings_entity_presave(EntityInterface $entity): void {
  switch ($entity->bundle()) {
    case 'job_posting':
      if ($entity->isNew()) {
        check_posting_exists($entity);
      }
    break;
    case 'job_posting_url':
      check_posting_url_exists($entity);
    break;
  }
}



/**
 * Implements hook_migration_pre_import().
 */
function postings_migration_pre_import(MigrateExecutableInterface $migrate_executable, Row $row, array $destination_ids) {
  $foo = 'bar';
}

/**
 * Implements hook_migration_pre_import_alter().
 */
function mymodule_migration_pre_import_alter(MigrateExecutableInterface $migrate_executable, Row $row, array $destination_ids) {
  $foo = 'bar';
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function check_posting_exists(EntityInterface $entity): void {
    $node_storage = Drupal::entityTypeManager()->getStorage('node');
    $ids = $node_storage->getQuery()
      ->condition('type', 'job_posting')
      ->condition('field_job_bank_number', $entity->get('field_job_bank_number')->getValue())
      ->accessCheck()
      ->execute();
    $postings = $node_storage->loadMultiple($ids);

    if (count($postings) > 0) {
      $test = concat_fields($entity);
      $posting = reset($postings);
      $existing = concat_fields($posting);
      if ($existing === $test) {
        throw new RuntimeException(t('Job Posting is not unique!'));
      }
      // Delete the old one. We have a new one.
      $posting->delete();
    }
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function check_posting_url_exists(EntityInterface $entity): void {
  $url = $entity->get('field_url')->getValue()[0]['uri'];
  $node_storage = Drupal::entityTypeManager()->getStorage('node');
  $ids = $node_storage->getQuery()
    ->condition('type', 'job_posting_url')
    ->condition('field_url', $url)
    ->accessCheck()
    ->execute();
  if (count($ids) > 0) {
    throw new RuntimeException(t('Job Posting URL is not unique!'));
  }
}

/**
 * Helper - get a concatenated string of all fields.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return string
 */
function concat_fields(EntityInterface $entity): string {
  $string = '';
  foreach ($entity->getFields() as $name => $field) {
    if ($name === 'title' || str_starts_with($name, 'field_')) {
      $string .= trim($field->getString());
    }
  }
  return $string;
}
